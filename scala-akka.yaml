# Description
# The example pipeline generates simple scala Akka server from Giter8 template
# compiles the artifact and publishes to Bintray,
# builds and pushes Docker image.
# The following variables are required:
# - APP_NAME
# - APP_VERSION
# - BINTRAY_REPOSITORY
# - BINTRAY_USER
# - BINTRAY_PASSWORD
# To use the shared volume '/codefresh/volume' for local cache, add the following variables:
# - SBT_OPTS="-Dcoursier.cache=/codefresh/volume/.coursier -Dsbt.ivy.home=/codefresh/volume/.ivy2 -Divy.home=/codefresh/volume/.ivy2 -Dsbt.boot.directory=/codefresh/volume/.sbt/ -Dsbt.global.base=/codefresh/volume/.sbt/"
# - COURSIER_CACHE="/codefresh/volume/.coursier"

---
version: "1.0"
stages:
  - prepare
  - build
  - test
  - dev
  - release

steps:

  generate_app:
    title: 'Generate Akka app'
    image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
    stage: prepare
    entry_point:
      - /bin/bash
      - -c
    cmd: |-
        set -eo pipefail
        rm -rf ${APP_NAME} || true
        # Install Test Akka project
        sbt new akka/akka-http-quickstart-scala.g8 --name=${APP_NAME}
        cd ${APP_NAME}
        # Add 'native-packager' and 'bintray' plugins  
        echo 'addSbtPlugin("com.typesafe.sbt" % "sbt-native-packager" % "1.3.6")' >> ./project/plugins.sbt
        echo 'addSbtPlugin("org.foundweekends" % "sbt-bintray" % "0.5.2")' >> ./project/plugins.sbt
        # Update server address to listen
        sed -i 's|localhost|0\.0\.0\.0|' ./src/main/scala/com/example/QuickstartApp.scala
        # Update the 'build.sbt'
        cat << EOF > ./build.sbt
        enablePlugins(JavaAppPackaging)
        lazy val akkaHttpVersion = "10.1.11"
        lazy val akkaVersion    = "2.6.1"
        lazy val root = (project in file(".")).
          settings(
            inThisBuild(List(
              version         := "${{APP_VERSION}}",
              organization    := "io.codefresh",
              scalaVersion    := "2.13.1",
              licenses        += ("Apache-2.0", url("https://www.apache.org/licenses/LICENSE-2.0.html"))
            )),
            name := "${APP_NAME}",
            publishMavenStyle := false,
            bintrayRepository := "${{BINTRAY_REPOSITORY}}",
            bintrayOrganization in bintray := None,
            bintrayVcsUrl := Some("git@github.com:codefresh-contrib/starter-workflows.git"),
            libraryDependencies ++= Seq(
              "com.typesafe.akka" %% "akka-http"                % akkaHttpVersion,
              "com.typesafe.akka" %% "akka-http-spray-json"     % akkaHttpVersion,
              "com.typesafe.akka" %% "akka-actor-typed"         % akkaVersion,
              "com.typesafe.akka" %% "akka-stream"              % akkaVersion,
              "ch.qos.logback"    % "logback-classic"           % "1.2.3",

              "com.typesafe.akka" %% "akka-http-testkit"        % akkaHttpVersion % Test,
              "com.typesafe.akka" %% "akka-actor-testkit-typed" % akkaVersion     % Test,
              "org.scalatest"     %% "scalatest"                % "3.0.8"         % Test
            )
          )
        EOF

  docker_stage:
    title: 'Prepare build docker'
    image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
    stage: build
    working_directory: '${{APP_NAME}}'
    commands:
      - sbt docker:stage

  docker_build:
    title: Building docker image
    type: build
    stage: build
    working_directory: '${{APP_NAME}}/target/docker/stage/'
    arguments:
      image_name: 'codefresh/${{APP_NAME}}'
      tag: latest

  sbt_test:
    title: 'Testing app'
    image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
    stage: test 
    working_directory: '${{APP_NAME}}'
    commands:
      - sbt test

  parallel_deploy:
    type: parallel
    stage: release
    when:
      steps:
        - name: sbt_test
          on:
          - success
    steps:
      sbt_publish:
        title: 'Publishing test app'
        image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
        stage: release
        working_directory: '${{APP_NAME}}'
        commands:
          - sbt publish
      docker_push:
        title: 'Push to DockerHub'
        type: push
        candidate: '${{docker_build}}'
        image_name: codefresh/${{APP_NAME}}
        registry: dockerhub  
        tags:
          - latest
          - '${{APP_VERSION}}'
